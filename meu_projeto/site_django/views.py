from django.shortcuts import render, redirect
from .models import Cliente # Importa o modelo Cliente
from django.contrib import messages # Importa o sistema de mensagens do Django
from .forms import ClienteForm # Importa o ClienteForm
from django.db import IntegrityError # Para tratar erros de integridade do banco de dados (ex: email duplicado)
from django.http import JsonResponse # Manteremos JsonResponse APENAS para a fun√ß√£o de login_user se ela for AJAX
from django.views.decorators.csrf import csrf_exempt # Para desabilitar a prote√ß√£o CSRF em APIs (usado no login_user)
import json # Para manipular JSON (usado no login_user)
from PIL import Image # Para manipula√ß√£o de imagem (fun√ß√£o de exemplo)

# Fun√ß√£o para a view de recupera√ß√£o de senha
def recuperar_senha_view(request):
    """
    Renderiza a p√°gina de recupera√ß√£o de senha.
    Voc√™ precisar√° criar o template 'site_django/recuperar_senha.html'.
    """
    return render(request, 'site_django/recuperar_senha.html')

# Fun√ß√£o para registro de novos clientes
def registrar_cliente(request):
    """
    Processa o registro de novos clientes.
    - Se a requisi√ß√£o for POST, tenta validar e salvar o formul√°rio.
    - Em caso de sucesso, adiciona uma mensagem de sucesso e redireciona.
    - Em caso de email duplicado ou outros erros de formul√°rio, adiciona uma mensagem de erro
    e redireciona, permitindo que a mensagem seja exibida no frontend.
    - Se a requisi√ß√£o n√£o for POST, simplesmente renderiza a p√°gina inicial com um formul√°rio vazio.
    """
    # Instancia o formul√°rio com os dados POST, se houver, ou um formul√°rio vazio.
    form = ClienteForm(request.POST or None)
    print("M√©todo da requisi√ß√£o:", request.method) # Para depura√ß√£o no console do servidor

    if request.method == 'POST':
        print("Formul√°rio POST recebido.") # Para depura√ß√£o

        if form.is_valid():
            print("Formul√°rio √© v√°lido.") # Para depura√ß√£o
            try:
                print("Tentando salvar o formul√°rio...") # Para depura√ß√£o
                cliente = form.save() # Salva o cliente no banco de dados
                print("Cliente salvo com sucesso:", cliente) # Para depura√ß√£o
                # Adiciona uma mensagem de sucesso que ser√° exibida no template
                messages.success(request, 'Cadastro realizado com sucesso! üéâ Agora voc√™ pode fazer login.')
                # Redireciona para a p√°gina inicial. O 'sucesso' n√£o precisa mais ser passado via contexto,
                # pois o sistema de mensagens do Django se encarrega disso.
                return redirect('pagina_inicial')

            except IntegrityError as e:
                # Captura erros de integridade, como e-mail duplicado (se o campo email for UNIQUE)
                print("Ocorreu um IntegrityError:", e) # Para depura√ß√£o
                if 'UNIQUE constraint failed: site_django_cliente.email' in str(e):
                    print("Erro de e-mail duplicado detectado!") # Para depura√ß√£o
                    # Adiciona uma mensagem de erro espec√≠fica para e-mail duplicado
                    messages.error(request, 'Este e-mail j√° est√° cadastrado. Por favor, use outro. üòû')
                else:
                    # Adiciona uma mensagem de erro gen√©rica para outros erros de integridade
                    messages.error(request, 'Ocorreu um erro ao cadastrar. Tente novamente. üòî')
                # Em ambos os casos de erro, redireciona para a p√°gina inicial.
                return redirect('pagina_inicial')

            except Exception as e:
                # Captura qualquer outra exce√ß√£o inesperada durante o salvamento
                print("Erro inesperado ao cadastrar:", e) # Para depura√ß√£o
                messages.error(request, f'Ocorreu um erro inesperado: {e} üòî')
                return redirect('pagina_inicial')
        else:
            # Se o formul√°rio N√ÉO for v√°lido (ex: campos faltando, formato inv√°lido)
            print("Formul√°rio √© inv√°lido:", form.errors) # Para depura√ß√£o
            # Adiciona uma mensagem de erro com os detalhes dos erros do formul√°rio
            # Voc√™ pode iterar sobre form.errors se quiser mais detalhes espec√≠ficos no frontend.
            for field, errors in form.errors.items():
                for error in errors:
                    # Adiciona cada erro do formul√°rio como uma mensagem separada
                    messages.error(request, f'Erro no campo {field}: {error} üòû')
            # Redireciona de volta para a p√°gina inicial para exibir os erros
            return redirect('pagina_inicial')
    else:
        # Se a requisi√ß√£o for GET, apenas renderiza a p√°gina inicial com o formul√°rio vazio
        print("Requisi√ß√£o n√£o √© POST (GET ou outra).") # Para depura√ß√£o

    # Renderiza a p√°gina inicial com o formul√°rio de cadastro (vazio para GET requests)
    return render(request, 'site_django/pagina_inicial.html', {'form_cadastro': form})

# P√°gina inicial do site
def site_django(request):
    """
    Renderiza a p√°gina inicial.
    Instancia um formul√°rio de cliente vazio para ser usado em modais de cadastro.
    """
    form_cadastro = ClienteForm() # Instancia o formul√°rio para exibir no modal de cadastro
    # Voc√™ pode adicionar l√≥gica para 'usuario_logado_nome' aqui, se estiver usando sess√µes ou autentica√ß√£o do Django.
    # Exemplo: usuario_logado_nome = request.session.get('usuario_nome')
    # Ou se voc√™ usar o sistema de autentica√ß√£o nativo do Django:
    # if request.user.is_authenticated:
    #     messages.info(request, f'Bem-vindo de volta, {request.user.username} üëã')

    return render(request, 'site_django/pagina_inicial.html', {'form_cadastro': form_cadastro})

# Fun√ß√£o de exemplo para redimensionamento de imagem
# Esta fun√ß√£o n√£o est√° integrada com um fluxo de upload de arquivos no momento.
def redimensionar_imagem(caminho_entrada, caminho_saida):
    """
    Redimensiona uma imagem para uma miniatura (thumbnail) de 300x300 pixels,
    mantendo a propor√ß√£o.
    """
    img = Image.open(caminho_entrada)
    img.thumbnail((300, 300))
    img.save(caminho_saida)

# Exemplo de fun√ß√£o de login usando AJAX/JSON
@csrf_exempt # Use @csrf_exempt com cautela, apenas para APIs onde o CSRF token n√£o pode ser enviado.
            # Para forms HTML normais, √© melhor usar o {% csrf_token %} e n√£o desabilitar.
def login_user(request):
    """
    Processa a requisi√ß√£o de login de usu√°rio via AJAX.
    Espera um JSON com 'email' e 'password'.
    Retorna JsonResponse com sucesso ou erro.
    NOTA: Para uma aplica√ß√£o real, √© altamente recomendado usar o sistema de autentica√ß√£o
        nativo do Django (django.contrib.auth) para seguran√ßa, que lida com hash de senhas,
        sess√µes, etc. Este √© um exemplo simplificado.
    """
    if request.method == 'POST':
        try:
            # Carrega os dados JSON do corpo da requisi√ß√£o
            data = json.loads(request.body)
            email = data.get('email')
            password = data.get('password') # Senha em texto claro (inseguro para produ√ß√£o!)

            # Tenta encontrar um cliente com o email e a senha fornecidos
            cliente = Cliente.objects.get(email=email, password=password)
            # Se encontrado, retorna sucesso
            # Voc√™ pode querer armazenar o status de login em uma sess√£o aqui
            # Ex: request.session['usuario_logado'] = cliente.email
            return JsonResponse({'success': True})
        except Cliente.DoesNotExist:
            # Se o cliente n√£o for encontrado (credenciais inv√°lidas)
            return JsonResponse({'error': 'E-mail ou senha inv√°lidos. üòû'}, status=401)
        except json.JSONDecodeError:
            # Se o corpo da requisi√ß√£o n√£o for um JSON v√°lido
            return JsonResponse({'error': 'Requisi√ß√£o inv√°lida.'}, status=400)
        except Exception as e:
            # Captura qualquer outro erro inesperado
            return JsonResponse({'error': f'Ocorreu um erro no login: {e}'}, status=500)
    else:
        # Se a requisi√ß√£o n√£o for POST
        return JsonResponse({'error': 'M√©todo n√£o permitido.'}, status=405)