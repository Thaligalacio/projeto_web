from django.shortcuts import render, redirect
# Importa o modelo Cliente - Assumindo que Cliente armazena dados adicionais, n√£o a senha.
# A senha ser√° gerenciada pelo User do Django.
from .models import Cliente
from django.contrib import messages
# Importa ClienteForm - Este form deve ser ajustado para n√£o salvar a senha diretamente no Cliente.
from .forms import ClienteForm
from django.db import IntegrityError
from django.http import JsonResponse
# Importa√ß√µes para o sistema de autentica√ß√£o do Django
from django.contrib.auth import authenticate, login, logout
from django.contrib.auth.models import User # Importa o modelo de usu√°rio padr√£o do Django
from django.views.decorators.http import require_POST # Melhor que csrf_exempt para seguran√ßa
import json # Para manipular JSON (usado no login_user)
from PIL import Image # Para manipula√ß√£o de imagem (fun√ß√£o de exemplo)

# Fun√ß√£o para a view de recupera√ß√£o de senha
def recuperar_senha_view(request):
    """
    Renderiza a p√°gina de recupera√ß√£o de senha.
    Voc√™ precisar√° criar o template 'site_django/recuperar_senha.html'.
    """
    return render(request, 'site_django/recuperar_senha.html')

# Fun√ß√£o para registro de novos clientes
def registrar_cliente(request):
    """
    Processa o registro de novos clientes.
    - Se a requisi√ß√£o for POST, tenta validar e salvar o formul√°rio.
    - Em caso de sucesso, adiciona uma mensagem de sucesso e redireciona.
    - Em caso de email duplicado ou outros erros de formul√°rio, adiciona uma mensagem de erro
    e RENDERIZA o template, permitindo que a mensagem seja exibida no frontend.
    - Se a requisi√ß√£o n√£o for POST, simplesmente renderiza a p√°gina inicial com um formul√°rio vazio.
    """
    # Instancia o formul√°rio com os dados POST, se houver, ou um formul√°rio vazio.
    form = ClienteForm(request.POST or None)
    print("M√©todo da requisi√ß√£o:", request.method) # Para depura√ß√£o no console do servidor

    if request.method == 'POST':
        print("Formul√°rio POST recebido.") # Para depura√ß√£o

        if form.is_valid():
            print("Formul√°rio √© v√°lido.") # Para depura√ß√£o
            try:
                # Obter dados do formul√°rio
                nome = form.cleaned_data.get('nome')
                email = form.cleaned_data.get('email')
                password = form.cleaned_data.get('password') # Senha deve vir do form, mas n√£o ser salva diretamente
                # telefone = form.cleaned_data.get('telefone')

                # --- Importante: Crie um usu√°rio Django para autentica√ß√£o segura ---
                # Verifica se j√° existe um usu√°rio com este e-mail
                if User.objects.filter(username=email).exists():
                    messages.error(request, 'Este e-mail j√° est√° cadastrado. Por favor, use outro. üòû')
                    return render(request, 'site_django/pagina_inicial.html', {'form_cadastro': form})

                user = User.objects.create_user(username=email, email=email, password=password)
                user.first_name = nome # Voc√™ pode usar o nome do cliente aqui

                # Salva o usu√°rio Django
                user.save()

                # Agora, salve o Cliente, possivelmente vinculando-o ao usu√°rio Django
                # (Assumindo que Cliente n√£o armazena a senha e tem uma FK para User ou √© um Perfil de User)
                # Se seu Cliente model tivesse uma OneToOneField para User:
                # cliente = form.save(commit=False)
                # cliente.user = user
                # cliente.save()
                # Ou se Cliente for apenas um perfil adicional, crie-o assim:
                cliente = Cliente.objects.create(nome=nome, email=email)
                # Se voc√™ tiver um campo user no Cliente, adicione:
                # cliente.user = user
                # cliente.save()

                print("Cliente e Usu√°rio Django salvos com sucesso!") # Para depura√ß√£o
                messages.success(request, 'Cadastro realizado com sucesso! üéâ Agora voc√™ pode fazer login.')
                # Em caso de sucesso, redireciona para a p√°gina inicial (ou para uma p√°gina de login)
                return redirect('pagina_inicial')

            except IntegrityError as e:
                # Captura erros de integridade, como e-mail duplicado (se o campo email for UNIQUE)
                print("Ocorreu um IntegrityError:", e) # Para depura√ß√£o
                if 'UNIQUE constraint failed' in str(e) and ('site_django_cliente.email' in str(e) or 'auth_user.username' in str(e)):
                    print("Erro de e-mail duplicado detectado!") # Para depura√ß√£o
                    messages.error(request, 'Este e-mail j√° est√° cadastrado. Por favor, use outro. üòû')
                else:
                    messages.error(request, 'Ocorreu um erro ao cadastrar. Tente novamente. üòî')
                return render(request, 'site_django/pagina_inicial.html', {'form_cadastro': form})

            except Exception as e:
                # Captura qualquer outra exce√ß√£o inesperada durante o salvamento
                print("Erro inesperado ao cadastrar:", e) # Para depura√ß√£o
                messages.error(request, f'Ocorreu um erro inesperado: {e} üòî')
                return render(request, 'site_django/pagina_inicial.html', {'form_cadastro': form})
        else:
            # Se o formul√°rio N√ÉO for v√°lido (ex: campos faltando, formato inv√°lido)
            print("Formul√°rio √© inv√°lido:", form.errors) # Para depura√ß√£o
            for field, errors in form.errors.items():
                for error in errors:
                    messages.error(request, f'Erro no campo {field}: {error} üòû')
            return render(request, 'site_django/pagina_inicial.html', {'form_cadastro': form})
    else:
        print("Requisi√ß√£o n√£o √© POST (GET ou outra).") # Para depura√ß√£o

    return render(request, 'site_django/pagina_inicial.html', {'form_cadastro': form})

# P√°gina inicial do site
def site_django(request):
    """
    Renderiza a p√°gina inicial.
    Instancia um formul√°rio de cliente vazio para ser usado em modais de cadastro.
    """
    form_cadastro = ClienteForm() # Instancia o formul√°rio para exibir no modal de cadastro
    # Adicionar mensagem de boas-vindas se o usu√°rio estiver logado
    # Importante: A mensagem de login agora ser√° adicionada dentro do login_user,
    # e esta parte aqui ser√° para mensagens em recarregamentos subsequentes,
    # como se o usu√°rio j√° estivesse logado ou fosse redirecionado de outras p√°ginas.
    if request.user.is_authenticated:
        # Use first_name se voc√™ tiver preenchido no registro, caso contr√°rio, use username
        user_display_name = request.user.first_name if request.user.first_name else request.user.username
        # Evita adicionar a mensagem 'Bem-vindo de volta' se j√° houver uma mensagem de login rec√©m-adicionada
        # (para evitar duplicidade imediata ap√≥s o login via AJAX)
        # Uma forma simples de evitar duplicidade pode ser verificar se a mensagem j√° existe na lista
        # de mensagens, mas isso pode ser complicado. O redirecionamento j√° limpa as mensagens.
        # Portanto, a l√≥gica principal para "Ol√°, nome" vir√° do `login_user` ao redirecionar.
        pass # Vamos lidar com a mensagem de "Ol√°, nome" no login_user para que ela apare√ßa na primeira carga.

    return render(request, 'site_django/pagina_inicial.html', {'form_cadastro': form_cadastro})

# Fun√ß√£o de exemplo para redimensionamento de imagem
def redimensionar_imagem(caminho_entrada, caminho_saida):
    """
    Redimensiona uma imagem para uma miniatura (thumbnail) de 300x300 pixels,
    mantendo a propor√ß√£o.
    """
    img = Image.open(caminho_entrada)
    img.thumbnail((300, 300))
    img.save(caminho_saida)

# Fun√ß√£o de login usando o sistema de autentica√ß√£o do Django
@require_POST # Garante que s√≥ aceitar√° requisi√ß√µes POST
def login_user(request):
    """
    Processa a requisi√ß√£o de login de usu√°rio.
    Esperar dados de 'email' (que ser√° o username para User do Django) e 'password'.
    Retorna JsonResponse com sucesso ou erro, incluindo redirect_url.
    """
    try:
        # Tenta carregar os dados como JSON (para requisi√ß√µes AJAX)
        data = json.loads(request.body)
        email = data.get('email')
        password = data.get('password')
    except json.JSONDecodeError:
        # Se n√£o for JSON, tenta pegar os dados de um formul√°rio POST normal
        email = request.POST.get('email')
        password = request.POST.get('password')

    # Usa o email como username para o sistema de autentica√ß√£o do Django
    user = authenticate(request, username=email, password=password)

    if user is not None:
        # Se as credenciais forem v√°lidas, loga o usu√°rio
        login(request, user)
        # Adiciona a mensagem de sucesso que ser√° exibida ap√≥s o redirecionamento
        user_display_name = user.first_name if user.first_name else user.username
        messages.success(request, f'Ol√°, {user_display_name}! üëã')
        
        # Retorna sucesso com a URL de redirecionamento para o frontend
        return JsonResponse({'success': True, 'message': 'Login realizado com sucesso!', 'redirect_url': '/'})
    else:
        # Se as credenciais forem inv√°lidas
        return JsonResponse({'success': False, 'message': 'E-mail ou senha inv√°lidos. üòû'}, status=400)

    # N√£o precisa de um 'else' para m√©todos n√£o POST devido ao @require_POST

# Exemplo de fun√ß√£o de logout
def logout_user(request):
    logout(request)
    messages.info(request, "Voc√™ foi desconectado.")
    return redirect('pagina_inicial') # Redireciona para a p√°gina inicial ap√≥s o logout
